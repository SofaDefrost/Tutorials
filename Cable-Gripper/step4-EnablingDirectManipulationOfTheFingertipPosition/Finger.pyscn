# -*- coding: utf-8 -*-

import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../data/mesh/'

def createScene(rootNode):
				rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
				rootNode.createObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

				rootNode.createObject('FreeMotionAnimationLoop')

				# Add a QPInverseProblemSolver to the scene if you need to solve inverse problem like the one that involved
				# when manipulating the robots by specifying their effector's position instead of by direct control
				# of the actuator's parameters.
				rootNode.createObject('QPInverseProblemSolver', printLog='0')
				# Otherwise use a GenericConstraintSolver
				#rootNode.createObject('GenericConstraintSolver')
				rootNode.createObject('CollisionPipeline', verbose="0")
				rootNode.createObject('BruteForceDetection', name="N2")
				rootNode.createObject('CollisionResponse', response="FrictionContact", responseParams="mu=0")
				rootNode.createObject('LocalMinDistance', name="Proximity", alarmDistance="5", contactDistance="1")

				rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
				rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")

				##########################################
				# FEM Model							  #
				##########################################
				finger = rootNode.createChild('finger')
				finger.createObject('EulerImplicit', name='odesolver', firstOrder='1')
				finger.createObject('SparseLDLSolver')

				# Add a componant to load a VTK tetrahedral mesh and expose the resulting topology in the scene .
				finger.createObject('MeshVTKLoader', name='loader', filename=path+'finger.vtk')
				finger.createObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
				finger.createObject('TetrahedronSetTopologyModifier')
				finger.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d')
				finger.createObject('TetrahedronSetGeometryAlgorithms', template='Vec3d')

				# Create a mechanicaobject component to stores the DoFs of the model
				finger.createObject('MechanicalObject', name='tetras', template='Vec3d', showIndices='false', showIndicesScale='4e-5', rx='0', dz='0')

				# Gives a mass to the model
				finger.createObject('UniformMass', totalMass='0.5')

				# Add a TetrahedronFEMForceField componant which implement an elastic material model solved using the Finite Element Method on
				# tetrahedrons.
				finger.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='18000')

				# To facilitate the selection of DoFs, SOFA has a concept called ROI (Region of Interest).
				# The idea is that ROI component "select" all DoFS that are enclosed by their "region".
				# We use ROI here to select a group of finger's DoFs that will be constrained to stay
				# at a fixed position.
				# You can either use "BoxROI"...
				finger.createObject('BoxROI', name='ROI', box='-15 0 0 5 10 15', drawBoxes='true')
				# Or "SphereROI"...
				#finger.createObject('SphereROI', name='ROI', centers='0 0 0', radii='5')

				# The RestShapeSpringsForceField componant is one way in Sofa to implement fixed point constraint.
				# Here the constraints are applied to the DoFs selected by the previously defined BoxROI
				finger.createObject('RestShapeSpringsForceField', points='@ROI.indices', stiffness='1e12')

				finger.createObject('LinearSolverConstraintCorrection')

				##########################################
				# Visualization						  #
				##########################################

				# In Sofa, visualization is handled by adding a rendering model.
				# Create an empty child node to store this rendering model.
				fingerVisu = finger.createChild('visu')

				# Add to this empty node a rendering model made of triangles and loaded from an stl file.
				fingerVisu.createObject('MeshSTLLoader', name="loader", filename=path+"finger.stl")
				fingerVisu.createObject('OglModel', src="@loader", template='ExtVec3f', color="0.0 0.7 0.7")

				# Add a BarycentricMapping to deform the rendering model to follow the ones of the mechanical model.
				fingerVisu.createObject('BarycentricMapping')

				##########################################
				# Cable								  #
				##########################################

				#  This create a new empty node in the scene and append it to the finger's node.
				cable = finger.createChild('cable')

				# This create a MechanicalObject and adds it to the actuator's node. A mechanicalobject is a componant
				# that holds the degree of freedom of our mechanical modelling. In the case of a CableConstraint it is a set of positions
				# specifying the points where the cable is passing by.
				cable.createObject('MechanicalObject',
						position=(
								" -17.5 12.5 2.5 " +
								" -32.5 12.5 2.5 " +
								" -47.5 12.5 2.5 " +
								" -62.5 12.5 2.5 " +
								" -77.5 12.5 2.5 " +

								" -83.5 12.5 4.5 " +
								" -85.5 12.5 6.5 " +
								" -85.5 12.5 8.5 " +
								" -83.5 12.5 10.5 " +

								" -77.5 12.5 12.5 " +
								" -62.5 12.5 12.5 " +
								" -47.5 12.5 12.5 " +
								" -32.5 12.5 12.5 " +
								" -17.5 12.5 12.5 " ))

				# Create a CableActuator object with a name.
				# indices: are referring to the MechanicalObject's positions.
				#		  The last indice is where the pullPoint is connected.
				# pullPoint: is the location from where the cable is pulled.
				cable.createObject('CableActuator', name="aCable",
						indices='0 1 2 3 4 5 6 7 8 9 10 11 12 13',
						pullPoint="0.0 12.5 2.5")

				# This create a BarycentricMapping. A BarycentricMapping is a key element as it will create a bi-directional link
				# between the cable's DoFs and the finger's ones so that movements of the cable's DoFs will be mapped
				# to the finger and vice-versa;
				cable.createObject('BarycentricMapping')


				##########################################
				# Effector goal for interactive control  #
				##########################################
				goal = rootNode.createChild('goal')
				goal.createObject('EulerImplicit', firstOrder='1')
				goal.createObject('CGLinearSolver', iterations='100', tolerance="1e-5", threshold="1e-5")

				# Set the initial position of the effector goal
				goal.createObject('MechanicalObject', name='goalMO',
								  position='-120  7.36479  7.14143')
				goal.createObject('Sphere', radius='5')
				goal.createObject('UncoupledConstraintCorrection')


				  ##########################################
				# Effector							   #
				##########################################
				effector = finger.createChild('fingertip')
				# Set the effector position(s)
				effector.createObject('MechanicalObject',
						position=("-103.071  7.36479  7.14143"))

				# Case of position effector
				#	  indices :
				#	  effectorGoal:
				effector.createObject('PositionEffector', template='Vec3d',
						indices="0",
						effectorGoal="@../../goal/goalMO.position")
				effector.createObject('BarycentricMapping', mapForces="false", mapMasses="false")

				return rootNode
