import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../data/mesh/'

def createScene(rootNode):

		rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
		rootNode.createObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

		rootNode.createObject('FreeMotionAnimationLoop')
		rootNode.createObject('GenericConstraintSolver', maxIterations="1e3", tolerance="1e-3")
		rootNode.createObject('PythonScriptController', filename="SoftGripperController.py", classname="controller")

		rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
		rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")


		################################ FINGERS ###################################
		translations=[[0,0,0],[0,20,0],[0,20,30]]
		rotations=[[0,0,25],[180,0,-25],[180,0,-25]]
		boxes=[[-15,0,0,5,10,15],[-15,10,-15,5,30,0],[-15,10,15,5,30,30]]
		pullPoints=[[0,12.5,2.5],[0,12.5,-2.5],[0,12.5,27.5]]
		for i in range(3):
			finger = rootNode.createChild('finger'+str(i+1))
			finger.createObject('EulerImplicit', name='odesolver')
			finger.createObject('SparseLDLSolver', name='preconditioner')

			finger.createObject('MeshVTKLoader', name='loader', filename=path+'finger.vtk', translation=translations[i], rotation=rotations[i])
			finger.createObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
			finger.createObject('TetrahedronSetTopologyModifier')
			finger.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d')
			finger.createObject('TetrahedronSetGeometryAlgorithms', template='Vec3d')

			finger.createObject('MechanicalObject', name='tetras', template='Vec3d')
			finger.createObject('UniformMass', totalMass='0.5')
			finger.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='18000')

			finger.createObject('BoxROI', name='boxROI', box=boxes[i], drawBoxes='true')
			finger.createObject('RestShapeSpringsForceField', points='@boxROI.indices', stiffness='1e12')

			finger.createObject('LinearSolverConstraintCorrection')

			#finger/actuator
			actuator = finger.createChild('actuator'+str(i+1))
			actuator.createObject('MechanicalObject', name="actuatorPoint", translation=translations[i], rotation=rotations[i],
				position=("-103.071  7.36479  7.14143" +

					" -17.5 12.5 2.5 " +
					" -32.5 12.5 2.5 " +
					" -47.5 12.5 2.5 " +
					" -62.5 12.5 2.5 " +
					" -77.5 12.5 2.5 " +

					" -83.5 12.5 4.5 " +
					" -85.5 12.5 6.5 " +
					" -85.5 12.5 8.5 " +
					" -83.5 12.5 10.5 " +

					" -77.5 12.5 12.5 " +
					" -62.5 12.5 12.5 " +
					" -47.5 12.5 12.5 " +
					" -32.5 12.5 12.5 " +
					" -17.5 12.5 12.5 " ))

			actuator.createObject('CableConstraint', template='Vec3d', name='CableConstraint', indices='1 2 3 4 5 6 7 8 9 10 11 12 13 14', pullPoint=pullPoints[i])
			actuator.createObject('BarycentricMapping', mapForces="false", mapMasses="false")

			#finger/fingerVisu
			fingerVisu = finger.createChild('visu')
			fingerVisu.createObject('MeshSTLLoader', name="loader", filename=path+"finger.stl")
			fingerVisu.createObject('OglModel', src="@loader", template='ExtVec3f', color="0.0 0.7 0.7", translation=translations[i], rotation=rotations[i])
			fingerVisu.createObject('BarycentricMapping')

		return rootNode
