import Sofa
import math
import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'
meshrobot=path+'finger0.vtu'

from math import cos, sin

cylinderOffset = 30.0;
Radius=22.75

graspedObjectRadius=13;
graspedObjectHeight=40;
mass=0.01;


R=graspedObjectRadius;
h=graspedObjectHeight;

volume = R*R*3.14*h

def transformTableInString(Table):
        sizeT =  len(Table);
        strOut= ' ';
        for p in range(sizeT):
            strOut = strOut+ str(Table[p])+' '


        return strOut


def createScene(rootNode):
        rootNode.findData('gravity').value='-981 0 0';
        rootNode.findData('dt').value="0.01"
        rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
        rootNode.createObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels showForceFields showInteractionForceFields hideWireframe')

        rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
        rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")


        ###################################################################
        # Direct simulation
        ###################################################################
        #rootNode.createObject('FreeMotionAnimationLoop')
        #rootNode.createObject('GenericConstraintSolver', printLog='0', tolerance="1e-15", maxIterations="2000")
        #rootNode.createObject('CollisionPipeline', verbose="0")
        #rootNode.createObject('BruteForceDetection', name="N2")
        #rootNode.createObject('RuleBasedContactManager', name="Response", response="FrictionContact", rules="0 * FrictionContact?mu=0.8" )
        #rootNode.createObject('LocalMinDistance', name="Proximity", alarmDistance="4", contactDistance="1", angleCone="0.01")

        # Control of the robot with the keyboard
        #rootNode.createObject('PythonScriptController', filename="controllerGripper.py", classname="controller")
	#directSimuNode= rootNode



        rootNode.createObject('FreeMotionAnimationLoop')
        rootNode.createObject('GenericConstraintSolver', printLog='0', tolerance="1e-15", maxIterations="10000")
        rootNode.createObject('CollisionPipeline', verbose="0")
        rootNode.createObject('BruteForceDetection', name="N2")
        rootNode.createObject('RuleBasedContactManager', name="Response", response="FrictionContact", rules="0 * FrictionContact?mu=0.8" )
        rootNode.createObject('LocalMinDistance', name="Proximity", alarmDistance="3", contactDistance="1", angleCone="0.01")


####################################################################################################
        # Control of the robot with the keyboard
        #step=1
        #count=1
        rootNode.createObject('PythonScriptController', filename="controllerGripper.py", classname="controller")

        ################################ Fix Floor ################################

        planeNode = rootNode.createChild('Plane')
        planeNode.createObject('MeshObjLoader', name='loader', filename="mesh/floorFlat.obj", triangulate="true", rotation="0 0 270", scale =5, translation="25 0 0")
        planeNode.createObject('Mesh', src="@loader")
        planeNode.createObject('MechanicalObject', src="@loader")
        planeNode.createObject('Triangle',simulated="0", moving="0")
        planeNode.createObject('Line',simulated="0", moving="0")
        planeNode.createObject('Point',simulated="0", moving="0")
        planeNode.createObject('OglModel',name="Visual", fileMesh="mesh/floorFlat.obj", color="1 0 0 1",rotation="0 0 270", scale =5, translation="25 0 0")


        ################################ Grasped Object ###################################
        # mechanics
        cube =rootNode.createChild('cube')
        cube.createObject('EulerImplicit', name='odesolver')
        cube.createObject('CGLinearSolver', name='cubeSolver')
        cube.createObject('MechanicalObject', template="Rigid", scale="1", position='38 0 0 0 0 0 1')

	Ix= mass/12.0*(3.0*R*R + h*h)
	Iy= mass/12.0*(3.0*R*R + h*h)
	Iz= mass*R*R/2.0

        cube.createObject('UniformMass', mass='0.01'+str(volume)+' ' +str(Ix)+ ' 0 0 0 '+str(Ix)+' 0 0 0 '+str(Iz))
        cube.createObject('UncoupledConstraintCorrection')

        #collision
        cubeCollis = cube.createChild('cubeCollis')
	cubeCollis.findData('activated').value=1
        cubeCollis.createObject('MeshObjLoader', name="loader", filename="mesh/cylinder_JD.obj", triangulate="true",  scale3d="400 400 2000", translation="0 0 -20")
        cubeCollis.createObject('Mesh', src="@loader")
        cubeCollis.createObject('MechanicalObject')
        cubeCollis.createObject('Triangle')
        cubeCollis.createObject('Line')
        cubeCollis.createObject('Point')
        cubeCollis.createObject('RigidMapping')

        #cubeCollis.createObject('LocalMinDistance', name="Proximity",alarmDistance="4", contactDistance="3", angleCone="0.01")

        #visualization
        cubeVisu = cube.createChild('cubeVisu')
        cubeVisu.createObject('OglModel', name="Visual", fileMesh="mesh/cylinder_JD.obj", color="0.0 0.1 0.5", scale3d="400 400 2000" , translation="0 0 -20")
        cubeVisu.createObject('RigidMapping')

	#return rootNode

        ################################ cylinderline Object ###################################

        # mechanics
        cylinder =rootNode.createChild('cylinder')
        cylinder.createObject('EulerImplicit', name='odesolver')
        cylinder.createObject('CGLinearSolver', name='cylinderSolver', iterations='1000', tolerance="1e-5", threshold="1e-5")
        cylinder.createObject('MechanicalObject', name="cylinderMO", template="Rigid", scale="5", dx="92.0", dy=str(cylinderOffset), dz="-25", rx="90" ,ry="0", velocity='0 0 0 0 0 0')
        cylinder.createObject('UniformMass', totalmass='0.030')
        cylinder.createObject('UncoupledConstraintCorrection')
        cylinder.createObject('FixedConstraint', fixAll='1')

        #collision
        cylinderCollis = cylinder.createChild('cylinderCollis')
        cylinderCollis.createObject('MeshObjLoader', name="loader", filename="mesh/cylinder_JD.obj", triangulate="true",  scale3d="1000 1000 2000", translation="0 0 -30")
        cylinderCollis.createObject('Mesh', src="@loader")
        cylinderCollis.createObject('MechanicalObject', rx=90)
	cylinderCollis.createObject('Triangle', group='2')
        #cylinderCollis.createObject('Line', proximity=str(Radius-1.0))
        #cylinderCollis.createObject('Point')
        cylinderCollis.createObject('RigidMapping')



        #visualization
        cylinderVisu = cylinder.createChild('cylinderVisu')
        cylinderVisu.createObject('OglModel', name="Visual", fileMesh="mesh/cylinderline.obj", color="0.0 0.1 0.5", scale="10")
        cylinderVisu.createObject('RigidMapping')

        ################################ cylinderline2 Object ###################################

        # mechanics
        cylinder2 =rootNode.createChild('cylinder2')
        cylinder2.createObject('EulerImplicit', name='odesolver')
        cylinder2.createObject('CGLinearSolver', name='cylinderSolver2', iterations='1000', tolerance="1e-5", threshold="1e-5")
        cylinder2.createObject('MechanicalObject', name="cylinder2MO", template="Rigid", scale="5", dx="92.0", dy=str(-cylinderOffset), dz="-25", rx="90" ,ry="0", velocity='0 0 0 0 0 0')
        cylinder2.createObject('UniformMass', totalmass='0.030')
        cylinder2.createObject('UncoupledConstraintCorrection')
        cylinder2.createObject('FixedConstraint', fixAll='1')

        #collision
 	cylinderCollis = cylinder2.createChild('cylinderCollis')
        cylinderCollis.createObject('MeshObjLoader', name="loader", filename="mesh/cylinder_JD.obj", triangulate="true",  scale3d="1000 1000 2000", translation="0 0 -30")
        cylinderCollis.createObject('Mesh', src="@loader")
        cylinderCollis.createObject('MechanicalObject', rx=90)
	cylinderCollis.createObject('Triangle', group='2')
        #cylinderCollis.createObject('Line', proximity=str(Radius-1.0))
        #cylinderCollis.createObject('Point')
        cylinderCollis.createObject('RigidMapping')



        #visualization
        cylinder2Visu = cylinder2.createChild('cylinder2Visu')
        cylinder2Visu.createObject('OglModel', name="Visual", fileMesh="mesh/cylinderline.obj", color="0.0 0.1 0.5", scale="10")
        cylinder2Visu.createObject('RigidMapping')


        ############################### FINGER 1 ###################################

        # mechanics
        finger = rootNode.createChild('finger')
        finger.createObject('EulerImplicit', name='odesolver')
        finger.createObject('SparseLDLSolver', name="precond")

        #loader= finger.createObject('MeshVTKLoader', name="loader", filename=meshrobot)
        #container=finger.createObject('TetrahedronSetTopologyContainer', src="@loader", name='container')


        #extrusion = rootNode.createChild('extrusion')
        finger.createObject('MeshObjLoader', name="topo",filename=path+'finger.obj')
        engine = finger.createObject('ExtrudeQuadsAndGenerateHexas', name='engine', template='Vec3d', thicknessIn='0.0', thicknessOut='-40', numberOfSlices='4', surfaceVertices='@topo.position', surfaceQuads='@topo.quads' )
        finger.createObject('HexahedronSetTopologyContainer', position='@engine.extrudedVertices', hexas='@engine.extrudedHexas')
        finger.createObject('HexahedronSetTopologyModifier')
        finger.createObject('HexahedronSetTopologyAlgorithms')
        finger.createObject('HexahedronSetGeometryAlgorithms')
        finger.createObject('MechanicalObject',name="tetras", template="Vec3d", position='@container.position', showIndices="false", showIndicesScale="4e-5", ry="0", rz="-90", dx="55", dy="50", dz="-25")
        finger.createObject('UniformMass', totalmass='0.05')
        finger.createObject('HexahedronFEMForceField' , template='Vec3d', name='FEM', method='large', poissonRatio='0.45',  youngModulus='200')
        finger.createObject('LinearSolverConstraintCorrection', solverName='precond')


        #collision

        fingerCollis = finger.createChild('collis')
	fingerCollis.findData('activated').value=1
        fingerCollis.createObject('MeshObjLoader', name="loader", filename=path+'WGripper_Collis.obj')


        #fingerCollis.createObject('MeshSTLLoader', name='loader', filename=path+'finger2.stl')
        fingerCollis.createObject('HexahedronSetTopologyContainer', src='@loader', name='container')
        fingerCollis.createObject('MechanicalObject', name='collisMO', template='Vec3d', position='@container.position',  showIndices="false", showIndicesScale="4e-5", ry="0", rz="-90", dx="55", dy="50", dz="-25")
        #fingerCollis.createObject('Triangle', group='1 2')
        #fingerCollis.createObject('Line',  group='1 2')
        fingerCollis.createObject('Point',  group='1 2')
        fingerCollis.createObject('BarycentricMapping')



        ############### small script to compute the rigid Mapping of the nodes attached to the weels
        engine.init()

	position = engine.findData('extrudedVertices').value


	#print position





        ##loader.init()
        #container.init()
        ##position= loader.findData('position').value;

        #moBelt.init()

        #moBelt.bwdInit()

        #position= moBelt.findData('position').value;

        numNodes = len(position)

        #print 'numNodes='
        #print numNodes


        #first cylinder
        mapPos=[];
        indices=[];

        #second cylinder
        mapPos2=[];
        indices2=[];

	#collision
	indicesCollision=[];


        for p in range(numNodes):

            x = position[p][0];
            y = position[p][1];
            z = position[p][2];

            if (y>9.9) & (x - 50 < -cylinderOffset):

                l = 50- cylinderOffset  - x;

                teta = l / Radius;
                mapPos = mapPos + [-Radius*cos(teta),z , -Radius*sin(teta)]
                indices = indices + [p];

            elif (y>9.9) & (x - 50 > cylinderOffset):

                l = x - 50 - cylinderOffset ;

                teta = l / Radius;
                mapPos2 = mapPos2 + [-Radius*cos(teta),z , Radius*sin(teta)]
                indices2 = indices2 + [p];

            elif (y>9.9) :

                indicesCollision = indicesCollision + [p];


        #print indicesCollision

        #first cylinder

        cylinderAttachPoints = cylinder.createChild('cylinderAttachPoints')
        cylinderAttachPoints.createObject('MechanicalObject', name='attachPointsMO', position = transformTableInString(mapPos), showObject='1')
        cylinderAttachPoints.createObject('RigidMapping')
        finger.createObject('RestShapeSpringsForceField', points=transformTableInString(indices), stiffness='1e8', external_rest_shape='../cylinder/cylinderAttachPoints/attachPointsMO')


        #second cylinder

        cylinder2AttachPoints = cylinder2.createChild('cylinder2AttachPoints')
        cylinder2AttachPoints.createObject('MechanicalObject', name='attachPointsMO', position = transformTableInString(mapPos2), showObject='1')
        cylinder2AttachPoints.createObject('RigidMapping')
        finger.createObject('RestShapeSpringsForceField', points=transformTableInString(indices2), stiffness='1e8', external_rest_shape='../cylinder2/cylinder2AttachPoints/attachPointsMO')


	#collision
	fingerTopSurfaceCollis = finger.createChild('fingerTopSurfaceCollis')
	fingerTopSurfaceCollis.createObject('MechanicalObject', name='collisionMO')
	fingerTopSurfaceCollis.createObject('Point', group='1')
	fingerTopSurfaceCollis.createObject('SubsetMapping', indices=transformTableInString(indicesCollision) )



        return rootNode
